pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/243/243.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/243/243.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.238ms
Contains 0.027ms
Restrict 0.038ms
MPrep 0.033ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [70] grounded tasks and [39] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [115] grounded tasks and [109] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 115 tasks, 109 methods.
Grounded PG:
Input was [70, 115], output was [70, 39].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 30 S 0 SC 0 SM 0 NSM 0 I 0 P 70 S 0 A 45 M 109
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/243/243.sas.
- State has 30 bits divided into 30 mutex groups.
- Domain contains 70 actions.
- Domain contains 115 tasks.
- Domain contains 109 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 109
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.001 seconds
- Visited list time 0.000124 seconds
- Visited list inserts 35
- Visited list pruned 2
- Visited list contains 33
- Visited list hash collisions 2
- Visited list used hash buckets 33
- Generated 130 search nodes
  Calculated heuristic for 102 nodes
  One modifications 27
  Effectless actions 1
- including 27 one modification actions
- including 0 one modification methods
- and       1 progressions of effectless actions
- Generated 102000 nodes per second
- Final fringe contains 24 nodes
- Status: Solved
- Found solution of length 49
- Total costs of actions: 20
==>
9 drive[truck_1,city_loc_1,city_loc_2]
14 pick_up[truck_1,city_loc_2,package_1,capacity_1,capacity_2]
25 drive[truck_1,city_loc_2,city_loc_1]
26 drive[truck_1,city_loc_1,city_loc_0]
27 drive[truck_1,city_loc_0,city_loc_3]
33 drop[truck_1,city_loc_3,package_1,capacity_1,capacity_2]
64 drive[truck_0,city_loc_0,city_loc_1]
65 drive[truck_0,city_loc_1,city_loc_2]
71 pick_up[truck_0,city_loc_2,package_0,capacity_1,capacity_2]
73 drive[truck_0,city_loc_2,city_loc_1]
79 drop[truck_0,city_loc_1,package_0,capacity_1,capacity_2]
86 drive[truck_0,city_loc_1,city_loc_0]
93 pick_up[truck_0,city_loc_0,package_3,capacity_1,capacity_2]
101 drive[truck_0,city_loc_0,city_loc_1]
102 drive[truck_0,city_loc_1,city_loc_2]
108 drop[truck_0,city_loc_2,package_3,capacity_1,capacity_2]
114 drive[truck_1,city_loc_3,city_loc_0]
120 pick_up[truck_1,city_loc_0,package_2,capacity_1,capacity_2]
123 drive[truck_1,city_loc_0,city_loc_3]
127 drop[truck_1,city_loc_3,package_2,capacity_1,capacity_2]
root 0
126 unload[truck_1,city_loc_3,package_2] -> m_unload_ordering_0 127
122 get_to[truck_1,city_loc_3] -> m_drive_to_ordering_0 123
119 load[truck_1,city_loc_0,package_2] -> m_load_ordering_0 120
113 get_to[truck_1,city_loc_0] -> m_drive_to_ordering_0 114
112 m_deliver_ordering_0_splitted_1[truck_1,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 113 119
110 deliver[package_2,city_loc_3] -> m_deliver_ordering_0 112 122 126
107 unload[truck_0,city_loc_2,package_3] -> m_unload_ordering_0 108
100 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 101
97 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 100 102
92 load[truck_0,city_loc_0,package_3] -> m_load_ordering_0 93
85 get_to[truck_0,city_loc_0] -> m_drive_to_ordering_0 86
84 m_deliver_ordering_0_splitted_1[truck_0,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 85 92
81 deliver[package_3,city_loc_2] -> m_deliver_ordering_0 84 97 107
78 unload[truck_0,city_loc_1,package_0] -> m_unload_ordering_0 79
72 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 73
70 load[truck_0,city_loc_2,package_0] -> m_load_ordering_0 71
63 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 64
42 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 63 65
38 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 42 70
35 deliver[package_0,city_loc_1] -> m_deliver_ordering_0 38 72 78
32 unload[truck_1,city_loc_3,package_1] -> m_unload_ordering_0 33
24 get_to[truck_1,city_loc_1] -> m_drive_to_ordering_0 25
22 get_to[truck_1,city_loc_0] -> m_drive_to_via_ordering_0 24 26
18 get_to[truck_1,city_loc_3] -> m_drive_to_via_ordering_0 22 27
13 load[truck_1,city_loc_2,package_1] -> m_load_ordering_0 14
8 get_to[truck_1,city_loc_2] -> m_drive_to_ordering_0 9
6 m_deliver_ordering_0_splitted_1[truck_1,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 8 13
2 deliver[package_1,city_loc_3] -> m_deliver_ordering_0 6 18 32
0 __top[] -> __top_method 2 35 81 110
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.351562 MEMPEAK_KBS 932
