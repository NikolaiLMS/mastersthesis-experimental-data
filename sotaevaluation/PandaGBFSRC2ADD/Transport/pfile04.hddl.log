pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/238/238.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/238/238.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.217ms
Contains 0.027ms
Restrict 0.038ms
MPrep 0.032ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [47] grounded tasks and [30] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [72] grounded tasks and [67] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 72 tasks, 67 methods.
Grounded PG:
Input was [47, 72], output was [47, 30].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 20 S 0 SC 0 SM 0 NSM 0 I 0 P 47 S 0 A 21 M 63
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/238/238.sas.
- State has 20 bits divided into 20 mutex groups.
- Domain contains 47 actions.
- Domain contains 68 tasks.
- Domain contains 63 methods.
- The initial state contains 6 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 65
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.001 seconds
- Visited list time 0.000188 seconds
- Visited list inserts 44
- Visited list pruned 4
- Visited list contains 40
- Visited list hash collisions 4
- Visited list used hash buckets 40
- Generated 223 search nodes
  Calculated heuristic for 166 nodes
  One modifications 52
  Effectless actions 5
- including 52 one modification actions
- including 0 one modification methods
- and       5 progressions of effectless actions
- Generated 166000 nodes per second
- Final fringe contains 40 nodes
- Status: Solved
- Found solution of length 49
- Total costs of actions: 22
==>
12 drive[truck_0,city_loc_0,city_loc_3]
13 drive[truck_0,city_loc_3,city_loc_2]
14 drive[truck_0,city_loc_2,city_loc_1]
45 pick_up[truck_0,city_loc_1,package_1,capacity_2,capacity_3]
115 drive[truck_0,city_loc_1,city_loc_2]
116 drive[truck_0,city_loc_2,city_loc_3]
117 drive[truck_0,city_loc_3,city_loc_0]
124 drop[truck_0,city_loc_0,package_1,capacity_2,capacity_3]
129 noop[truck_0,city_loc_0]
132 pick_up[truck_0,city_loc_0,package_0,capacity_2,capacity_3]
136 drive[truck_0,city_loc_0,city_loc_3]
144 drop[truck_0,city_loc_3,package_0,capacity_2,capacity_3]
150 drive[truck_0,city_loc_3,city_loc_2]
156 pick_up[truck_0,city_loc_2,package_3,capacity_2,capacity_3]
165 drive[truck_0,city_loc_2,city_loc_3]
166 drive[truck_0,city_loc_3,city_loc_0]
174 drop[truck_0,city_loc_0,package_3,capacity_2,capacity_3]
197 drive[truck_0,city_loc_0,city_loc_3]
206 pick_up[truck_0,city_loc_3,package_2,capacity_2,capacity_3]
212 drive[truck_0,city_loc_3,city_loc_2]
213 drive[truck_0,city_loc_2,city_loc_1]
221 drop[truck_0,city_loc_1,package_2,capacity_2,capacity_3]
root 0
220 unload[truck_0,city_loc_1,package_2] -> m_unload_ordering_0 221
211 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 212
210 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 211 213
205 load[truck_0,city_loc_3,package_2] -> m_load_ordering_0 206
196 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 197
183 m_deliver_ordering_0_splitted_1[truck_0,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 196 205
173 unload[truck_0,city_loc_0,package_3] -> m_unload_ordering_0 174
164 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 165
161 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 164 166
155 load[truck_0,city_loc_2,package_3] -> m_load_ordering_0 156
149 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 150
148 m_deliver_ordering_0_splitted_1[truck_0,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 149 155
143 unload[truck_0,city_loc_3,package_0] -> m_unload_ordering_0 144
135 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 136
131 load[truck_0,city_loc_0,package_0] -> m_load_ordering_0 132
128 get_to[truck_0,city_loc_0] -> m_i_am_there_ordering_0 129
126 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 128 131
123 unload[truck_0,city_loc_0,package_1] -> m_unload_ordering_0 124
114 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 115
55 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 114 116
48 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 55 117
44 load[truck_0,city_loc_1,package_1] -> m_load_ordering_0 45
11 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 12
9 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 11 13
5 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 9 14
2 m_deliver_ordering_0_splitted_1[truck_0,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 5 44
0 __top[] -> <<<<__top_method;deliver[package_3,city_loc_0];m_deliver_ordering_0;2;0,1,-1,-2,-3,3>;deliver[package_2,city_loc_1];m_deliver_ordering_0;5;0,1,2,3,4,-1,-2,-3>;deliver[package_1,city_loc_0];m_deliver_ordering_0;0;-1,-2,-3,1,2,3,4,5,6,7>;deliver[package_0,city_loc_3];m_deliver_ordering_0;3;0,1,2,-1,-2,-3,4,5,6,7,8,9> 2 48 123 126 135 143 148 161 173 183 210 220
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.334961 MEMPEAK_KBS 932
