pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/232/232.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/232/232.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.424ms
Contains 0.052ms
Restrict 0.066ms
MPrep 0.062ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [146] grounded tasks and [73] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [235] grounded tasks and [229] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 235 tasks, 229 methods.
Grounded PG:
Input was [146, 235], output was [146, 73].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 54 S 0 SC 0 SM 0 NSM 0 I 0 P 146 S 0 A 89 M 229
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/232/232.sas.
- State has 54 bits divided into 54 mutex groups.
- Domain contains 146 actions.
- Domain contains 235 tasks.
- Domain contains 229 methods.
- The initial state contains 12 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 221
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.239 seconds
- Visited list time 0.008263 seconds
- Visited list inserts 1605
- Visited list pruned 706
- Visited list contains 899
- Visited list hash collisions 706
- Visited list used hash buckets 899
- Generated 10552 search nodes
  Calculated heuristic for 6219 nodes
  One modifications 4109
  Effectless actions 224
- including 4109 one modification actions
- including 0 one modification methods
- and       224 progressions of effectless actions
- Generated 26020 nodes per second
- Final fringe contains 1807 nodes
- Status: Solved
- Found solution of length 121
- Total costs of actions: 52
==>
37 drive[truck_0,city_loc_5,city_loc_6]
38 drive[truck_0,city_loc_6,city_loc_1]
39 drive[truck_0,city_loc_1,city_loc_0]
40 drive[truck_0,city_loc_0,city_loc_3]
48 pick_up[truck_0,city_loc_3,package_5,capacity_1,capacity_2]
85 drive[truck_0,city_loc_3,city_loc_0]
86 drive[truck_0,city_loc_0,city_loc_1]
87 drive[truck_0,city_loc_1,city_loc_6]
88 drive[truck_0,city_loc_6,city_loc_5]
94 drop[truck_0,city_loc_5,package_5,capacity_1,capacity_2]
101 drive[truck_1,city_loc_5,city_loc_4]
107 pick_up[truck_1,city_loc_4,package_4,capacity_1,capacity_2]
110 drive[truck_1,city_loc_4,city_loc_5]
120 drop[truck_1,city_loc_5,package_4,capacity_1,capacity_2]
10280 drive[truck_1,city_loc_5,city_loc_6]
10281 drive[truck_1,city_loc_6,city_loc_1]
10282 drive[truck_1,city_loc_1,city_loc_0]
10283 drive[truck_1,city_loc_0,city_loc_3]
10290 pick_up[truck_1,city_loc_3,package_1,capacity_1,capacity_2]
10321 drive[truck_1,city_loc_3,city_loc_0]
10322 drive[truck_1,city_loc_0,city_loc_1]
10323 drive[truck_1,city_loc_1,city_loc_6]
10324 drive[truck_1,city_loc_6,city_loc_4]
10331 drop[truck_1,city_loc_4,package_1,capacity_1,capacity_2]
10337 drive[truck_0,city_loc_5,city_loc_7]
10342 pick_up[truck_0,city_loc_7,package_3,capacity_1,capacity_2]
10347 drive[truck_0,city_loc_7,city_loc_5]
10348 drive[truck_0,city_loc_5,city_loc_2]
10359 drop[truck_0,city_loc_2,package_3,capacity_1,capacity_2]
10366 noop[truck_0,city_loc_2]
10370 pick_up[truck_0,city_loc_2,package_6,capacity_1,capacity_2]
10376 drive[truck_0,city_loc_2,city_loc_5]
10377 drive[truck_0,city_loc_5,city_loc_7]
10387 drop[truck_0,city_loc_7,package_6,capacity_1,capacity_2]
10395 noop[truck_1,city_loc_4]
10400 pick_up[truck_1,city_loc_4,package_2,capacity_1,capacity_2]
10413 drive[truck_1,city_loc_4,city_loc_6]
10414 drive[truck_1,city_loc_6,city_loc_1]
10415 drive[truck_1,city_loc_1,city_loc_0]
10425 drop[truck_1,city_loc_0,package_2,capacity_1,capacity_2]
10433 noop[truck_1,city_loc_0]
10437 pick_up[truck_1,city_loc_0,package_0,capacity_1,capacity_2]
10511 drive[truck_1,city_loc_0,city_loc_1]
10512 drive[truck_1,city_loc_1,city_loc_6]
10513 drive[truck_1,city_loc_6,city_loc_5]
10514 drive[truck_1,city_loc_5,city_loc_2]
10519 drop[truck_1,city_loc_2,package_0,capacity_1,capacity_2]
10527 noop[truck_0,city_loc_7]
10531 pick_up[truck_0,city_loc_7,package_7,capacity_1,capacity_2]
10538 drive[truck_0,city_loc_7,city_loc_5]
10539 drive[truck_0,city_loc_5,city_loc_4]
10550 drop[truck_0,city_loc_4,package_7,capacity_1,capacity_2]
root 0
10549 unload[truck_0,city_loc_4,package_7] -> m_unload_ordering_0 10550
10537 get_to[truck_0,city_loc_5] -> m_drive_to_ordering_0 10538
10536 get_to[truck_0,city_loc_4] -> m_drive_to_via_ordering_0 10537 10539
10530 load[truck_0,city_loc_7,package_7] -> m_load_ordering_0 10531
10526 get_to[truck_0,city_loc_7] -> m_i_am_there_ordering_0 10527
10524 m_deliver_ordering_0_splitted_1[truck_0,package_7] -> _splitting_method_m_deliver_ordering_0_splitted_1 10526 10530
10522 deliver[package_7,city_loc_4] -> m_deliver_ordering_0 10524 10536 10549
10518 unload[truck_1,city_loc_2,package_0] -> m_unload_ordering_0 10519
10510 get_to[truck_1,city_loc_1] -> m_drive_to_ordering_0 10511
10470 get_to[truck_1,city_loc_6] -> m_drive_to_via_ordering_0 10510 10512
10447 get_to[truck_1,city_loc_5] -> m_drive_to_via_ordering_0 10470 10513
10441 get_to[truck_1,city_loc_2] -> m_drive_to_via_ordering_0 10447 10514
10436 load[truck_1,city_loc_0,package_0] -> m_load_ordering_0 10437
10432 get_to[truck_1,city_loc_0] -> m_i_am_there_ordering_0 10433
10428 m_deliver_ordering_0_splitted_1[truck_1,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 10432 10436
10426 deliver[package_0,city_loc_2] -> m_deliver_ordering_0 10428 10441 10518
10424 unload[truck_1,city_loc_0,package_2] -> m_unload_ordering_0 10425
10412 get_to[truck_1,city_loc_6] -> m_drive_to_ordering_0 10413
10409 get_to[truck_1,city_loc_1] -> m_drive_to_via_ordering_0 10412 10414
10404 get_to[truck_1,city_loc_0] -> m_drive_to_via_ordering_0 10409 10415
10399 load[truck_1,city_loc_4,package_2] -> m_load_ordering_0 10400
10394 get_to[truck_1,city_loc_4] -> m_i_am_there_ordering_0 10395
10391 m_deliver_ordering_0_splitted_1[truck_1,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 10394 10399
10388 deliver[package_2,city_loc_0] -> m_deliver_ordering_0 10391 10404 10424
10386 unload[truck_0,city_loc_7,package_6] -> m_unload_ordering_0 10387
10375 get_to[truck_0,city_loc_5] -> m_drive_to_ordering_0 10376
10373 get_to[truck_0,city_loc_7] -> m_drive_to_via_ordering_0 10375 10377
10369 load[truck_0,city_loc_2,package_6] -> m_load_ordering_0 10370
10365 get_to[truck_0,city_loc_2] -> m_i_am_there_ordering_0 10366
10362 m_deliver_ordering_0_splitted_1[truck_0,package_6] -> _splitting_method_m_deliver_ordering_0_splitted_1 10365 10369
10361 deliver[package_6,city_loc_7] -> m_deliver_ordering_0 10362 10373 10386
10358 unload[truck_0,city_loc_2,package_3] -> m_unload_ordering_0 10359
10346 get_to[truck_0,city_loc_5] -> m_drive_to_ordering_0 10347
10345 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 10346 10348
10341 load[truck_0,city_loc_7,package_3] -> m_load_ordering_0 10342
10336 get_to[truck_0,city_loc_7] -> m_drive_to_ordering_0 10337
10335 m_deliver_ordering_0_splitted_1[truck_0,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 10336 10341
10332 deliver[package_3,city_loc_2] -> m_deliver_ordering_0 10335 10345 10358
10330 unload[truck_1,city_loc_4,package_1] -> m_unload_ordering_0 10331
10320 get_to[truck_1,city_loc_0] -> m_drive_to_ordering_0 10321
10319 get_to[truck_1,city_loc_1] -> m_drive_to_via_ordering_0 10320 10322
10304 get_to[truck_1,city_loc_6] -> m_drive_to_via_ordering_0 10319 10323
10295 get_to[truck_1,city_loc_4] -> m_drive_to_via_ordering_0 10304 10324
10289 load[truck_1,city_loc_3,package_1] -> m_load_ordering_0 10290
10279 get_to[truck_1,city_loc_6] -> m_drive_to_ordering_0 10280
4331 get_to[truck_1,city_loc_1] -> m_drive_to_via_ordering_0 10279 10281
780 get_to[truck_1,city_loc_0] -> m_drive_to_via_ordering_0 4331 10282
224 get_to[truck_1,city_loc_3] -> m_drive_to_via_ordering_0 780 10283
221 m_deliver_ordering_0_splitted_1[truck_1,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 224 10289
202 deliver[package_1,city_loc_4] -> m_deliver_ordering_0 221 10295 10330
119 unload[truck_1,city_loc_5,package_4] -> m_unload_ordering_0 120
109 get_to[truck_1,city_loc_5] -> m_drive_to_ordering_0 110
106 load[truck_1,city_loc_4,package_4] -> m_load_ordering_0 107
100 get_to[truck_1,city_loc_4] -> m_drive_to_ordering_0 101
97 m_deliver_ordering_0_splitted_1[truck_1,package_4] -> _splitting_method_m_deliver_ordering_0_splitted_1 100 106
95 deliver[package_4,city_loc_5] -> m_deliver_ordering_0 97 109 119
93 unload[truck_0,city_loc_5,package_5] -> m_unload_ordering_0 94
84 get_to[truck_0,city_loc_0] -> m_drive_to_ordering_0 85
76 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 84 86
65 get_to[truck_0,city_loc_6] -> m_drive_to_via_ordering_0 76 87
54 get_to[truck_0,city_loc_5] -> m_drive_to_via_ordering_0 65 88
47 load[truck_0,city_loc_3,package_5] -> m_load_ordering_0 48
36 get_to[truck_0,city_loc_6] -> m_drive_to_ordering_0 37
26 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 36 38
22 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 26 39
9 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 22 40
6 m_deliver_ordering_0_splitted_1[truck_0,package_5] -> _splitting_method_m_deliver_ordering_0_splitted_1 9 47
2 deliver[package_5,city_loc_5] -> m_deliver_ordering_0 6 54 93
0 __top[] -> __top_method 2 95 202 10332 10361 10388 10426 10522
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.578125 MEMPEAK_KBS 932
