pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/233/233.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/233/233.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.248ms
Contains 0.029ms
Restrict 0.04ms
MPrep 0.037ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [45] grounded tasks and [35] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [76] grounded tasks and [71] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 76 tasks, 71 methods.
Grounded PG:
Input was [45, 76], output was [45, 35].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 23 S 0 SC 0 SM 0 NSM 0 I 0 P 45 S 0 A 26 M 66
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/233/233.sas.
- State has 23 bits divided into 23 mutex groups.
- Domain contains 45 actions.
- Domain contains 71 tasks.
- Domain contains 66 methods.
- The initial state contains 7 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 67
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
   1s visitime    0.12s generated nodes    235423 nodes/sec  233786 cur h   84 mod.depth   18 inserts     15898 dups       357 size     15541 hash fail    368 hash buckets  15530
   2s visitime    0.22s generated nodes    490945 nodes/sec  243282 cur h   65 mod.depth   31 inserts     30749 dups       709 size     30040 hash fail    739 hash buckets  30010
   3s visitime    0.33s generated nodes    766664 nodes/sec  253275 cur h   68 mod.depth   30 inserts     44796 dups      1093 size     43703 hash fail   1142 hash buckets  43654
Search Results
- Search time 3.48 seconds
- Visited list time 0.37 seconds
- Visited list inserts 50841
- Visited list pruned 1416
- Visited list contains 49425
- Visited list hash collisions 1487
- Visited list used hash buckets 49354
- Generated 888613 search nodes
  Calculated heuristic for 312888 nodes
  One modifications 561702
  Effectless actions 14023
- including 561702 one modification actions
- including 0 one modification methods
- and       14023 progressions of effectless actions
- Generated 89936 nodes per second
- Final fringe contains 125997 nodes
- Status: Solved
- Found solution of length 64
- Total costs of actions: 29
==>
4 drive[truck_0,city_loc_4,city_loc_2]
10 pick_up[truck_0,city_loc_2,package_2,capacity_1,capacity_2]
13 drive[truck_0,city_loc_2,city_loc_4]
400 drop[truck_0,city_loc_4,package_2,capacity_1,capacity_2]
354889 drive[truck_0,city_loc_4,city_loc_2]
354890 drive[truck_0,city_loc_2,city_loc_1]
354891 drive[truck_0,city_loc_1,city_loc_3]
354898 pick_up[truck_0,city_loc_3,package_1,capacity_1,capacity_2]
354910 drive[truck_0,city_loc_3,city_loc_1]
354911 drive[truck_0,city_loc_1,city_loc_2]
354912 drive[truck_0,city_loc_2,city_loc_4]
356395 drop[truck_0,city_loc_4,package_1,capacity_1,capacity_2]
888353 drive[truck_0,city_loc_4,city_loc_2]
888354 drive[truck_0,city_loc_2,city_loc_1]
888355 drive[truck_0,city_loc_1,city_loc_3]
888362 pick_up[truck_0,city_loc_3,package_0,capacity_1,capacity_2]
888369 drive[truck_0,city_loc_3,city_loc_1]
888370 drive[truck_0,city_loc_1,city_loc_0]
888390 drop[truck_0,city_loc_0,package_0,capacity_1,capacity_2]
888484 drive[truck_0,city_loc_0,city_loc_1]
888491 pick_up[truck_0,city_loc_1,package_4,capacity_1,capacity_2]
888495 drive[truck_0,city_loc_1,city_loc_2]
888501 drop[truck_0,city_loc_2,package_4,capacity_1,capacity_2]
888580 drive[truck_0,city_loc_2,city_loc_1]
888581 drive[truck_0,city_loc_1,city_loc_3]
888592 pick_up[truck_0,city_loc_3,package_3,capacity_1,capacity_2]
888601 drive[truck_0,city_loc_3,city_loc_1]
888602 drive[truck_0,city_loc_1,city_loc_2]
888610 drop[truck_0,city_loc_2,package_3,capacity_1,capacity_2]
root 0
888609 unload[truck_0,city_loc_2,package_3] -> m_unload_ordering_0 888610
888600 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 888601
888596 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 888600 888602
888591 load[truck_0,city_loc_3,package_3] -> m_load_ordering_0 888592
888579 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 888580
888535 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 888579 888581
888516 m_deliver_ordering_0_splitted_1[truck_0,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 888535 888591
888500 unload[truck_0,city_loc_2,package_4] -> m_unload_ordering_0 888501
888494 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 888495
888490 load[truck_0,city_loc_1,package_4] -> m_load_ordering_0 888491
888483 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 888484
888479 m_deliver_ordering_0_splitted_1[truck_0,package_4] -> _splitting_method_m_deliver_ordering_0_splitted_1 888483 888490
888389 unload[truck_0,city_loc_0,package_0] -> m_unload_ordering_0 888390
888368 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 888369
888365 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 888368 888370
888361 load[truck_0,city_loc_3,package_0] -> m_load_ordering_0 888362
888352 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 888353
539044 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 888352 888354
417414 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 539044 888355
414834 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 417414 888361
356394 unload[truck_0,city_loc_4,package_1] -> m_unload_ordering_0 356395
354909 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 354910
354905 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 354909 354911
354901 get_to[truck_0,city_loc_4] -> m_drive_to_via_ordering_0 354905 354912
354897 load[truck_0,city_loc_3,package_1] -> m_load_ordering_0 354898
354888 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 354889
120466 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 354888 354890
47589 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 120466 354891
43171 m_deliver_ordering_0_splitted_1[truck_0,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 47589 354897
399 unload[truck_0,city_loc_4,package_2] -> m_unload_ordering_0 400
12 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 13
9 load[truck_0,city_loc_2,package_2] -> m_load_ordering_0 10
3 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 4
2 m_deliver_ordering_0_splitted_1[truck_0,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 3 9
0 __top[] -> <<<<<__top_method;deliver[package_4,city_loc_2];m_deliver_ordering_0;3;0,1,2,-1,-2,-3,4>;deliver[package_3,city_loc_2];m_deliver_ordering_0;6;0,1,2,3,4,5,-1,-2,-3>;deliver[package_2,city_loc_4];m_deliver_ordering_0;0;-1,-2,-3,1,2,3,4,5,6,7,8>;deliver[package_1,city_loc_4];m_deliver_ordering_0;3;0,1,2,-1,-2,-3,4,5,6,7,8,9,10>;deliver[package_0,city_loc_0];m_deliver_ordering_0;6;0,1,2,3,4,5,-1,-2,-3,7,8,9,10,11,12> 2 12 399 43171 354901 356394 414834 888365 888389 888479 888494 888500 888516 888596 888609
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.60938 MEMPEAK_KBS 3904
