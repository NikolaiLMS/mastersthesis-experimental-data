pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/247/247.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/247/247.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.246ms
Contains 0.029ms
Restrict 0.045ms
MPrep 0.037ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [56] grounded tasks and [33] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [86] grounded tasks and [79] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 86 tasks, 79 methods.
Grounded PG:
Input was [56, 86], output was [56, 33].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 23 S 0 SC 0 SM 0 NSM 0 I 0 P 56 S 0 A 25 M 74
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/247/247.sas.
- State has 23 bits divided into 23 mutex groups.
- Domain contains 56 actions.
- Domain contains 81 tasks.
- Domain contains 74 methods.
- The initial state contains 7 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 78
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.002 seconds
- Visited list time 0.000469 seconds
- Visited list inserts 123
- Visited list pruned 32
- Visited list contains 91
- Visited list hash collisions 32
- Visited list used hash buckets 91
- Generated 558 search nodes
  Calculated heuristic for 392 nodes
  One modifications 152
  Effectless actions 14
- including 152 one modification actions
- including 0 one modification methods
- and       14 progressions of effectless actions
- Generated 196000 nodes per second
- Final fringe contains 75 nodes
- Status: Solved
- Found solution of length 70
- Total costs of actions: 32
==>
12 drive[truck_0,city_loc_1,city_loc_3]
13 drive[truck_0,city_loc_3,city_loc_2]
14 drive[truck_0,city_loc_2,city_loc_0]
21 pick_up[truck_0,city_loc_0,package_0,capacity_2,capacity_3]
44 drive[truck_0,city_loc_0,city_loc_2]
45 drive[truck_0,city_loc_2,city_loc_3]
46 drive[truck_0,city_loc_3,city_loc_1]
54 drop[truck_0,city_loc_1,package_0,capacity_2,capacity_3]
59 drive[truck_0,city_loc_1,city_loc_1]
65 pick_up[truck_0,city_loc_1,package_4,capacity_2,capacity_3]
74 drive[truck_0,city_loc_1,city_loc_3]
75 drive[truck_0,city_loc_3,city_loc_2]
81 drop[truck_0,city_loc_2,package_4,capacity_2,capacity_3]
89 noop[truck_0,city_loc_2]
95 pick_up[truck_0,city_loc_2,package_1,capacity_2,capacity_3]
98 drive[truck_0,city_loc_2,city_loc_3]
105 drop[truck_0,city_loc_3,package_1,capacity_2,capacity_3]
235 drive[truck_0,city_loc_3,city_loc_2]
236 drive[truck_0,city_loc_2,city_loc_0]
242 pick_up[truck_0,city_loc_0,package_2,capacity_2,capacity_3]
260 drive[truck_0,city_loc_0,city_loc_2]
261 drive[truck_0,city_loc_2,city_loc_3]
262 drive[truck_0,city_loc_3,city_loc_1]
270 drop[truck_0,city_loc_1,package_2,capacity_2,capacity_3]
524 drive[truck_0,city_loc_1,city_loc_3]
525 drive[truck_0,city_loc_3,city_loc_2]
526 drive[truck_0,city_loc_2,city_loc_0]
533 pick_up[truck_0,city_loc_0,package_3,capacity_2,capacity_3]
546 drive[truck_0,city_loc_0,city_loc_2]
547 drive[truck_0,city_loc_2,city_loc_3]
548 drive[truck_0,city_loc_3,city_loc_1]
554 drop[truck_0,city_loc_1,package_3,capacity_2,capacity_3]
root 0
553 unload[truck_0,city_loc_1,package_3] -> m_unload_ordering_0 554
545 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 546
543 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 545 547
538 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 543 548
532 load[truck_0,city_loc_0,package_3] -> m_load_ordering_0 533
523 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 524
314 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 523 525
280 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 314 526
277 m_deliver_ordering_0_splitted_1[truck_0,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 280 532
269 unload[truck_0,city_loc_1,package_2] -> m_unload_ordering_0 270
259 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 260
252 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 259 261
247 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 252 262
241 load[truck_0,city_loc_0,package_2] -> m_load_ordering_0 242
234 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 235
179 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 234 236
176 m_deliver_ordering_0_splitted_1[truck_0,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 179 241
104 unload[truck_0,city_loc_3,package_1] -> m_unload_ordering_0 105
97 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 98
94 load[truck_0,city_loc_2,package_1] -> m_load_ordering_0 95
88 get_to[truck_0,city_loc_2] -> m_i_am_there_ordering_0 89
85 m_deliver_ordering_0_splitted_1[truck_0,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 88 94
80 unload[truck_0,city_loc_2,package_4] -> m_unload_ordering_0 81
73 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 74
71 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 73 75
64 load[truck_0,city_loc_1,package_4] -> m_load_ordering_0 65
58 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 59
56 m_deliver_ordering_0_splitted_1[truck_0,package_4] -> _splitting_method_m_deliver_ordering_0_splitted_1 58 64
53 unload[truck_0,city_loc_1,package_0] -> m_unload_ordering_0 54
43 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 44
31 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 43 45
26 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 31 46
20 load[truck_0,city_loc_0,package_0] -> m_load_ordering_0 21
11 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 12
9 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 11 13
5 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 9 14
2 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 5 20
0 __top[] -> <<<<<__top_method;deliver[package_4,city_loc_2];m_deliver_ordering_0;1;0,-1,-2,-3,2,3,4>;deliver[package_3,city_loc_1];m_deliver_ordering_0;6;0,1,2,3,4,5,-1,-2,-3>;deliver[package_2,city_loc_1];m_deliver_ordering_0;5;0,1,2,3,4,-1,-2,-3,6,7,8>;deliver[package_1,city_loc_3];m_deliver_ordering_0;4;0,1,2,3,-1,-2,-3,5,6,7,8,9,10>;deliver[package_0,city_loc_1];m_deliver_ordering_0;0;-1,-2,-3,1,2,3,4,5,6,7,8,9,10,11,12> 2 26 53 56 71 80 85 97 104 176 247 269 277 538 553
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.114746 MEMPEAK_KBS 932
