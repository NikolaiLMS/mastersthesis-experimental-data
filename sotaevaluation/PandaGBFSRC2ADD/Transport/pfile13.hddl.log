pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/215/215.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/215/215.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.274ms
Contains 0.036ms
Restrict 0.042ms
MPrep 0.047ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [88] grounded tasks and [47] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [144] grounded tasks and [137] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 144 tasks, 137 methods.
Grounded PG:
Input was [88, 144], output was [88, 47].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 36 S 0 SC 0 SM 0 NSM 0 I 0 P 88 S 0 A 56 M 137
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/215/215.sas.
- State has 36 bits divided into 36 mutex groups.
- Domain contains 88 actions.
- Domain contains 144 tasks.
- Domain contains 137 methods.
- The initial state contains 9 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 136
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.004 seconds
- Visited list time 0.000433 seconds
- Visited list inserts 98
- Visited list pruned 6
- Visited list contains 92
- Visited list hash collisions 6
- Visited list used hash buckets 92
- Generated 490 search nodes
  Calculated heuristic for 356 nodes
  One modifications 120
  Effectless actions 14
- including 120 one modification actions
- including 0 one modification methods
- and       14 progressions of effectless actions
- Generated 89000 nodes per second
- Final fringe contains 97 nodes
- Status: Solved
- Found solution of length 69
- Total costs of actions: 29
==>
8 drive[truck_0,city_loc_0,city_loc_2]
13 pick_up[truck_0,city_loc_2,package_2,capacity_1,capacity_2]
57 drive[truck_0,city_loc_2,city_loc_0]
58 drive[truck_0,city_loc_0,city_loc_1]
59 drive[truck_0,city_loc_1,city_loc_4]
67 drop[truck_0,city_loc_4,package_2,capacity_1,capacity_2]
272 drive[truck_0,city_loc_4,city_loc_1]
273 drive[truck_0,city_loc_1,city_loc_0]
274 drive[truck_0,city_loc_0,city_loc_2]
281 pick_up[truck_0,city_loc_2,package_1,capacity_1,capacity_2]
392 drive[truck_0,city_loc_2,city_loc_0]
393 drive[truck_0,city_loc_0,city_loc_1]
394 drive[truck_0,city_loc_1,city_loc_4]
402 drop[truck_0,city_loc_4,package_1,capacity_1,capacity_2]
409 noop[truck_0,city_loc_4]
412 pick_up[truck_0,city_loc_4,package_0,capacity_1,capacity_2]
422 drive[truck_0,city_loc_4,city_loc_1]
423 drive[truck_0,city_loc_1,city_loc_0]
430 drop[truck_0,city_loc_0,package_0,capacity_1,capacity_2]
439 noop[truck_1,city_loc_0]
445 pick_up[truck_1,city_loc_0,package_4,capacity_1,capacity_2]
451 drive[truck_1,city_loc_0,city_loc_1]
452 drive[truck_1,city_loc_1,city_loc_4]
457 drop[truck_1,city_loc_4,package_4,capacity_1,capacity_2]
465 drive[truck_0,city_loc_0,city_loc_1]
471 pick_up[truck_0,city_loc_1,package_3,capacity_1,capacity_2]
480 drive[truck_0,city_loc_1,city_loc_0]
481 drive[truck_0,city_loc_0,city_loc_3]
488 drop[truck_0,city_loc_3,package_3,capacity_1,capacity_2]
root 0
487 unload[truck_0,city_loc_3,package_3] -> m_unload_ordering_0 488
479 get_to[truck_0,city_loc_0] -> m_drive_to_ordering_0 480
476 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 479 481
470 load[truck_0,city_loc_1,package_3] -> m_load_ordering_0 471
464 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 465
462 m_deliver_ordering_0_splitted_1[truck_0,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 464 470
460 deliver[package_3,city_loc_3] -> m_deliver_ordering_0 462 476 487
456 unload[truck_1,city_loc_4,package_4] -> m_unload_ordering_0 457
450 get_to[truck_1,city_loc_1] -> m_drive_to_ordering_0 451
448 get_to[truck_1,city_loc_4] -> m_drive_to_via_ordering_0 450 452
444 load[truck_1,city_loc_0,package_4] -> m_load_ordering_0 445
438 get_to[truck_1,city_loc_0] -> m_i_am_there_ordering_0 439
434 m_deliver_ordering_0_splitted_1[truck_1,package_4] -> _splitting_method_m_deliver_ordering_0_splitted_1 438 444
432 deliver[package_4,city_loc_4] -> m_deliver_ordering_0 434 448 456
429 unload[truck_0,city_loc_0,package_0] -> m_unload_ordering_0 430
421 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 422
419 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 421 423
411 load[truck_0,city_loc_4,package_0] -> m_load_ordering_0 412
408 get_to[truck_0,city_loc_4] -> m_i_am_there_ordering_0 409
406 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 408 411
404 deliver[package_0,city_loc_0] -> m_deliver_ordering_0 406 419 429
401 unload[truck_0,city_loc_4,package_1] -> m_unload_ordering_0 402
391 get_to[truck_0,city_loc_0] -> m_drive_to_ordering_0 392
288 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 391 393
284 get_to[truck_0,city_loc_4] -> m_drive_to_via_ordering_0 288 394
280 load[truck_0,city_loc_2,package_1] -> m_load_ordering_0 281
271 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 272
117 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 271 273
89 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 117 274
86 m_deliver_ordering_0_splitted_1[truck_0,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 89 280
68 deliver[package_1,city_loc_4] -> m_deliver_ordering_0 86 284 401
66 unload[truck_0,city_loc_4,package_2] -> m_unload_ordering_0 67
56 get_to[truck_0,city_loc_0] -> m_drive_to_ordering_0 57
20 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 56 58
16 get_to[truck_0,city_loc_4] -> m_drive_to_via_ordering_0 20 59
12 load[truck_0,city_loc_2,package_2] -> m_load_ordering_0 13
7 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 8
6 m_deliver_ordering_0_splitted_1[truck_0,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 7 12
2 deliver[package_2,city_loc_4] -> m_deliver_ordering_0 6 16 66
0 __top[] -> __top_method 2 68 404 432 460
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.171487 MEMPEAK_KBS 3776
