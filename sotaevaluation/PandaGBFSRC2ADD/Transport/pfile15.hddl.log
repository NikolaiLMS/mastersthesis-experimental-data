pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/249/249.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/249/249.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.367ms
Contains 0.049ms
Restrict 0.052ms
MPrep 0.059ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
 ---> Disabling potentially consistent extension checking for action:           2 (pick_up)
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [126] grounded tasks and [64] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [204] grounded tasks and [197] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 204 tasks, 197 methods.
Grounded PG:
Input was [126, 204], output was [126, 64].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 48 S 0 SC 0 SM 0 NSM 0 I 0 P 126 S 0 A 78 M 197
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/249/249.sas.
- State has 48 bits divided into 48 mutex groups.
- Domain contains 126 actions.
- Domain contains 204 tasks.
- Domain contains 197 methods.
- The initial state contains 11 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 192
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.009 seconds
- Visited list time 0.00067 seconds
- Visited list inserts 150
- Visited list pruned 16
- Visited list contains 134
- Visited list hash collisions 16
- Visited list used hash buckets 134
- Generated 864 search nodes
  Calculated heuristic for 633 nodes
  One modifications 211
  Effectless actions 20
- including 211 one modification actions
- including 0 one modification methods
- and       20 progressions of effectless actions
- Generated 70333 nodes per second
- Final fringe contains 191 nodes
- Status: Solved
- Found solution of length 95
- Total costs of actions: 40
==>
11 drive[truck_1,city_loc_2,city_loc_3]
12 drive[truck_1,city_loc_3,city_loc_1]
19 pick_up[truck_1,city_loc_1,package_3,capacity_1,capacity_2]
29 drive[truck_1,city_loc_1,city_loc_3]
30 drive[truck_1,city_loc_3,city_loc_2]
37 drop[truck_1,city_loc_2,package_3,capacity_1,capacity_2]
45 noop[truck_0,city_loc_6]
49 pick_up[truck_0,city_loc_6,package_0,capacity_1,capacity_2]
53 drive[truck_0,city_loc_6,city_loc_2]
60 drop[truck_0,city_loc_2,package_0,capacity_1,capacity_2]
66 drive[truck_1,city_loc_2,city_loc_6]
71 pick_up[truck_1,city_loc_6,package_2,capacity_1,capacity_2]
196 drive[truck_1,city_loc_6,city_loc_2]
197 drive[truck_1,city_loc_2,city_loc_4]
198 drive[truck_1,city_loc_4,city_loc_5]
206 drop[truck_1,city_loc_5,package_2,capacity_1,capacity_2]
217 drive[truck_0,city_loc_2,city_loc_3]
218 drive[truck_0,city_loc_3,city_loc_1]
311 pick_up[truck_0,city_loc_1,package_1,capacity_1,capacity_2]
674 drive[truck_0,city_loc_1,city_loc_3]
675 drive[truck_0,city_loc_3,city_loc_2]
676 drive[truck_0,city_loc_2,city_loc_6]
682 drop[truck_0,city_loc_6,package_1,capacity_1,capacity_2]
696 drive[truck_1,city_loc_5,city_loc_4]
697 drive[truck_1,city_loc_4,city_loc_3]
706 pick_up[truck_1,city_loc_3,package_5,capacity_1,capacity_2]
717 drive[truck_1,city_loc_3,city_loc_4]
718 drive[truck_1,city_loc_4,city_loc_5]
719 drive[truck_1,city_loc_5,city_loc_0]
738 drop[truck_1,city_loc_0,package_5,capacity_1,capacity_2]
813 drive[truck_0,city_loc_6,city_loc_2]
814 drive[truck_0,city_loc_2,city_loc_4]
820 pick_up[truck_0,city_loc_4,package_6,capacity_1,capacity_2]
823 drive[truck_0,city_loc_4,city_loc_2]
832 drop[truck_0,city_loc_2,package_6,capacity_1,capacity_2]
840 drive[truck_0,city_loc_2,city_loc_4]
847 pick_up[truck_0,city_loc_4,package_4,capacity_1,capacity_2]
852 drive[truck_0,city_loc_4,city_loc_2]
853 drive[truck_0,city_loc_2,city_loc_6]
862 drop[truck_0,city_loc_6,package_4,capacity_1,capacity_2]
root 0
861 unload[truck_0,city_loc_6,package_4] -> m_unload_ordering_0 862
851 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 852
850 get_to[truck_0,city_loc_6] -> m_drive_to_via_ordering_0 851 853
846 load[truck_0,city_loc_4,package_4] -> m_load_ordering_0 847
839 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 840
836 m_deliver_ordering_0_splitted_1[truck_0,package_4] -> _splitting_method_m_deliver_ordering_0_splitted_1 839 846
834 deliver[package_4,city_loc_6] -> m_deliver_ordering_0 836 850 861
831 unload[truck_0,city_loc_2,package_6] -> m_unload_ordering_0 832
822 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 823
819 load[truck_0,city_loc_4,package_6] -> m_load_ordering_0 820
812 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 813
747 get_to[truck_0,city_loc_4] -> m_drive_to_via_ordering_0 812 814
742 m_deliver_ordering_0_splitted_1[truck_0,package_6] -> _splitting_method_m_deliver_ordering_0_splitted_1 747 819
739 deliver[package_6,city_loc_2] -> m_deliver_ordering_0 742 822 831
737 unload[truck_1,city_loc_0,package_5] -> m_unload_ordering_0 738
716 get_to[truck_1,city_loc_4] -> m_drive_to_ordering_0 717
714 get_to[truck_1,city_loc_5] -> m_drive_to_via_ordering_0 716 718
709 get_to[truck_1,city_loc_0] -> m_drive_to_via_ordering_0 714 719
705 load[truck_1,city_loc_3,package_5] -> m_load_ordering_0 706
695 get_to[truck_1,city_loc_4] -> m_drive_to_ordering_0 696
693 get_to[truck_1,city_loc_3] -> m_drive_to_via_ordering_0 695 697
687 m_deliver_ordering_0_splitted_1[truck_1,package_5] -> _splitting_method_m_deliver_ordering_0_splitted_1 693 705
685 deliver[package_5,city_loc_0] -> m_deliver_ordering_0 687 709 737
681 unload[truck_0,city_loc_6,package_1] -> m_unload_ordering_0 682
673 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 674
360 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 673 675
315 get_to[truck_0,city_loc_6] -> m_drive_to_via_ordering_0 360 676
310 load[truck_0,city_loc_1,package_1] -> m_load_ordering_0 311
216 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 217
214 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 216 218
210 m_deliver_ordering_0_splitted_1[truck_0,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 214 310
208 deliver[package_1,city_loc_6] -> m_deliver_ordering_0 210 315 681
205 unload[truck_1,city_loc_5,package_2] -> m_unload_ordering_0 206
195 get_to[truck_1,city_loc_2] -> m_drive_to_ordering_0 196
82 get_to[truck_1,city_loc_4] -> m_drive_to_via_ordering_0 195 197
76 get_to[truck_1,city_loc_5] -> m_drive_to_via_ordering_0 82 198
70 load[truck_1,city_loc_6,package_2] -> m_load_ordering_0 71
65 get_to[truck_1,city_loc_6] -> m_drive_to_ordering_0 66
64 m_deliver_ordering_0_splitted_1[truck_1,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 65 70
62 deliver[package_2,city_loc_5] -> m_deliver_ordering_0 64 76 205
59 unload[truck_0,city_loc_2,package_0] -> m_unload_ordering_0 60
52 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 53
48 load[truck_0,city_loc_6,package_0] -> m_load_ordering_0 49
44 get_to[truck_0,city_loc_6] -> m_i_am_there_ordering_0 45
41 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 44 48
40 deliver[package_0,city_loc_2] -> m_deliver_ordering_0 41 52 59
36 unload[truck_1,city_loc_2,package_3] -> m_unload_ordering_0 37
28 get_to[truck_1,city_loc_3] -> m_drive_to_ordering_0 29
24 get_to[truck_1,city_loc_2] -> m_drive_to_via_ordering_0 28 30
18 load[truck_1,city_loc_1,package_3] -> m_load_ordering_0 19
10 get_to[truck_1,city_loc_3] -> m_drive_to_ordering_0 11
7 get_to[truck_1,city_loc_1] -> m_drive_to_via_ordering_0 10 12
4 m_deliver_ordering_0_splitted_1[truck_1,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 7 18
1 deliver[package_3,city_loc_2] -> m_deliver_ordering_0 4 24 36
0 __top[] -> __top_method 1 40 62 208 685 739 834
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.207031 MEMPEAK_KBS 932
