pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/164/164.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/164/164.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.824ms
Contains 0.139ms
Restrict 0.118ms
MPrep 0.112ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
 ---> Disabling potentially consistent extension checking for action:           8 (__method_precondition_m5_do_move)
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [150] grounded tasks and [85] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [224] grounded tasks and [140] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 224 tasks, 140 methods.
Grounded PG:
Input was [150, 224], output was [150, 85].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
12 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 84 S 0 SC 0 SM 0 NSM 0 I 0 P 57 S 81 A 61 M 127
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/164/164.sas.
- State has 84 bits divided into 84 mutex groups.
- Domain contains 138 actions.
- Domain contains 199 tasks.
- Domain contains 127 methods.
- The initial state contains 34 set bits.
- The initial task is "__top[]".
- State-based goal contains 11 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 187
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.005 seconds
- Visited list time 0.000596 seconds
- Visited list inserts 126
- Visited list pruned 0
- Visited list contains 126
- Visited list hash collisions 0
- Visited list used hash buckets 126
- Generated 566 search nodes
  Calculated heuristic for 274 nodes
  One modifications 94
  Effectless actions 198
- including 94 one modification actions
- including 0 one modification methods
- and       198 progressions of effectless actions
- Generated 54800 nodes per second
- Final fringe contains 4 nodes
- Status: Solved
- Found solution of length 203
- Total costs of actions: 71
==>
3 __method_precondition_m1_do_put_on[]
5 __method_precondition_m6_do_clear[b4]
6 nop[]
10 __method_precondition_m7_do_clear[b13,b9]
14 __method_precondition_m7_do_clear[b9,b5]
18 __method_precondition_m7_do_clear[b5,b1]
22 __method_precondition_m7_do_clear[b1,b7]
24 __method_precondition_m6_do_clear[b7]
25 nop[]
26 unstack[b7,b1]
27 put-down[b7]
28 unstack[b1,b5]
29 put-down[b1]
30 unstack[b5,b9]
31 put-down[b5]
32 unstack[b9,b13]
33 put-down[b9]
39 __method_precondition_m2_do_on_table[b13]
40 unstack[b13,b12]
41 put-down[b13]
43 __method_precondition_m4_do_move[b4,b13]
44 pick-up[b4]
45 stack[b4,b13]
49 __method_precondition_m1_do_put_on[]
59 __method_precondition_m6_do_clear[b8]
60 nop[]
63 __method_precondition_m6_do_clear[b4]
64 nop[]
67 __method_precondition_m6_do_clear[b4]
68 nop[]
75 __method_precondition_m5_do_move[b8,b4]
78 unstack[b8,b3]
79 stack[b8,b4]
82 __method_precondition_m1_do_put_on[]
84 __method_precondition_m6_do_clear[b11]
85 nop[]
88 __method_precondition_m6_do_clear[b8]
89 nop[]
92 __method_precondition_m6_do_clear[b8]
93 nop[]
97 __method_precondition_m4_do_move[b11,b8]
98 pick-up[b11]
99 stack[b11,b8]
103 __method_precondition_m1_do_put_on[]
157 __method_precondition_m7_do_clear[b10,b3]
163 __method_precondition_m3_do_on_table[b3]
164 nop[]
165 unstack[b3,b10]
166 put-down[b3]
170 __method_precondition_m6_do_clear[b11]
171 nop[]
174 __method_precondition_m6_do_clear[b11]
175 nop[]
181 __method_precondition_m4_do_move[b10,b11]
182 pick-up[b10]
183 stack[b10,b11]
187 __method_precondition_m1_do_put_on[]
189 __method_precondition_m6_do_clear[b5]
190 nop[]
194 __method_precondition_m6_do_clear[b10]
195 nop[]
199 __method_precondition_m6_do_clear[b10]
200 nop[]
206 __method_precondition_m4_do_move[b5,b10]
207 pick-up[b5]
208 stack[b5,b10]
212 __method_precondition_m1_do_put_on[]
218 __method_precondition_m6_do_clear[b6]
219 nop[]
248 __method_precondition_m6_do_clear[b5]
249 nop[]
253 __method_precondition_m6_do_clear[b5]
254 nop[]
258 __method_precondition_m4_do_move[b6,b5]
259 pick-up[b6]
260 stack[b6,b5]
264 __method_precondition_m1_do_put_on[]
292 __method_precondition_m6_do_clear[b12]
293 nop[]
300 __method_precondition_m6_do_clear[b6]
301 nop[]
304 __method_precondition_m6_do_clear[b6]
305 nop[]
311 __method_precondition_m4_do_move[b12,b6]
312 pick-up[b12]
313 stack[b12,b6]
317 __method_precondition_m1_do_put_on[]
333 __method_precondition_m6_do_clear[b2]
334 nop[]
342 __method_precondition_m6_do_clear[b12]
343 nop[]
350 __method_precondition_m6_do_clear[b12]
351 nop[]
361 __method_precondition_m4_do_move[b2,b12]
362 pick-up[b2]
363 stack[b2,b12]
367 __method_precondition_m1_do_put_on[]
377 __method_precondition_m6_do_clear[b9]
378 nop[]
387 __method_precondition_m6_do_clear[b2]
388 nop[]
395 __method_precondition_m6_do_clear[b2]
396 nop[]
409 __method_precondition_m4_do_move[b9,b2]
410 pick-up[b9]
411 stack[b9,b2]
415 __method_precondition_m1_do_put_on[]
425 __method_precondition_m6_do_clear[b7]
426 nop[]
429 __method_precondition_m6_do_clear[b9]
430 nop[]
443 __method_precondition_m6_do_clear[b9]
444 nop[]
453 __method_precondition_m4_do_move[b7,b9]
454 pick-up[b7]
455 stack[b7,b9]
459 __method_precondition_m1_do_put_on[]
477 __method_precondition_m3_do_on_table[b3]
478 nop[]
482 __method_precondition_m6_do_clear[b7]
483 nop[]
491 __method_precondition_m6_do_clear[b7]
492 nop[]
500 __method_precondition_m4_do_move[b3,b7]
501 pick-up[b3]
502 stack[b3,b7]
506 __method_precondition_m1_do_put_on[]
533 __method_precondition_m6_do_clear[b1]
534 nop[]
537 __method_precondition_m3_do_on_table[b3]
538 nop[]
546 __method_precondition_m3_do_on_table[b3]
547 nop[]
561 __method_precondition_m4_do_move[b1,b3]
562 pick-up[b1]
563 stack[b1,b3]
root 0
560 do_move[b1,b3] -> m4_do_move 561 562 563
545 do_on_table[b3] -> m3_do_on_table 546 547
536 do_clear[b3] -> m6_do_clear 537 538
532 do_clear[b1] -> m6_do_clear 533 534
505 do_put_on[b1,b3] -> m1_do_put_on 506 532 536 545 560
499 do_move[b3,b7] -> m4_do_move 500 501 502
490 do_on_table[b7] -> m3_do_on_table 491 492
481 do_clear[b7] -> m6_do_clear 482 483
476 do_clear[b3] -> m6_do_clear 477 478
458 do_put_on[b3,b7] -> m1_do_put_on 459 476 481 490 499
452 do_move[b7,b9] -> m4_do_move 453 454 455
442 do_on_table[b9] -> m3_do_on_table 443 444
428 do_clear[b9] -> m6_do_clear 429 430
424 do_clear[b7] -> m6_do_clear 425 426
414 do_put_on[b7,b9] -> m1_do_put_on 415 424 428 442 452
408 do_move[b9,b2] -> m4_do_move 409 410 411
394 do_on_table[b2] -> m3_do_on_table 395 396
386 do_clear[b2] -> m6_do_clear 387 388
376 do_clear[b9] -> m6_do_clear 377 378
366 do_put_on[b9,b2] -> m1_do_put_on 367 376 386 394 408
360 do_move[b2,b12] -> m4_do_move 361 362 363
349 do_on_table[b12] -> m3_do_on_table 350 351
341 do_clear[b12] -> m6_do_clear 342 343
332 do_clear[b2] -> m6_do_clear 333 334
316 do_put_on[b2,b12] -> m1_do_put_on 317 332 341 349 360
310 do_move[b12,b6] -> m4_do_move 311 312 313
303 do_on_table[b6] -> m3_do_on_table 304 305
299 do_clear[b6] -> m6_do_clear 300 301
291 do_clear[b12] -> m6_do_clear 292 293
263 do_put_on[b12,b6] -> m1_do_put_on 264 291 299 303 310
257 do_move[b6,b5] -> m4_do_move 258 259 260
252 do_on_table[b5] -> m3_do_on_table 253 254
247 do_clear[b5] -> m6_do_clear 248 249
217 do_clear[b6] -> m6_do_clear 218 219
211 do_put_on[b6,b5] -> m1_do_put_on 212 217 247 252 257
205 do_move[b5,b10] -> m4_do_move 206 207 208
198 do_on_table[b10] -> m3_do_on_table 199 200
193 do_clear[b10] -> m6_do_clear 194 195
188 do_clear[b5] -> m6_do_clear 189 190
186 do_put_on[b5,b10] -> m1_do_put_on 187 188 193 198 205
180 do_move[b10,b11] -> m4_do_move 181 182 183
173 do_on_table[b11] -> m3_do_on_table 174 175
169 do_clear[b11] -> m6_do_clear 170 171
162 do_clear[b3] -> m6_do_clear 163 164
156 do_clear[b10] -> m7_do_clear 157 162 165 166
102 do_put_on[b10,b11] -> m1_do_put_on 103 156 169 173 180
96 do_move[b11,b8] -> m4_do_move 97 98 99
91 do_on_table[b8] -> m3_do_on_table 92 93
87 do_clear[b8] -> m6_do_clear 88 89
83 do_clear[b11] -> m6_do_clear 84 85
81 do_put_on[b11,b8] -> m1_do_put_on 82 83 87 91 96
77 m5_do_move_splitted_1[b8] -> _splitting_method_m5_do_move_splitted_1 78
74 do_move[b8,b4] -> m5_do_move 75 77 79
66 do_on_table[b4] -> m3_do_on_table 67 68
62 do_clear[b4] -> m6_do_clear 63 64
58 do_clear[b8] -> m6_do_clear 59 60
48 do_put_on[b8,b4] -> m1_do_put_on 49 58 62 66 74
42 do_move[b4,b13] -> m4_do_move 43 44 45
38 do_on_table[b13] -> <m2_do_on_table;m2_do_on_table_splitted_2[b13];_splitting_method_m2_do_on_table_splitted_2;1;0,-1,2> 39 40 41
23 do_clear[b7] -> m6_do_clear 24 25
21 do_clear[b1] -> m7_do_clear 22 23 26 27
17 do_clear[b5] -> m7_do_clear 18 21 28 29
13 do_clear[b9] -> m7_do_clear 14 17 30 31
9 do_clear[b13] -> m7_do_clear 10 13 32 33
4 do_clear[b4] -> m6_do_clear 5 6
2 do_put_on[b4,b13] -> m1_do_put_on 3 4 9 38 42
0 __top[] -> __top_method 2 48 81 102 186 211 263 316 366 414 458 505
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.356934 MEMPEAK_KBS 932
