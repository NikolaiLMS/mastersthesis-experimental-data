pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/183/183.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/183/183.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.428ms
Contains 0.071ms
Restrict 0.059ms
MPrep 0.054ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [78] grounded tasks and [46] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [116] grounded tasks and [72] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 116 tasks, 72 methods.
Grounded PG:
Input was [78, 116], output was [78, 46].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
6 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 45 S 0 SC 0 SM 0 NSM 0 I 0 P 30 S 42 A 32 M 66
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/183/183.sas.
- State has 45 bits divided into 45 mutex groups.
- Domain contains 72 actions.
- Domain contains 104 tasks.
- Domain contains 66 methods.
- The initial state contains 19 set bits.
- The initial task is "__top[]".
- State-based goal contains 5 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 98
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.001 seconds
- Visited list time 0.000189 seconds
- Visited list inserts 47
- Visited list pruned 0
- Visited list contains 47
- Visited list hash collisions 0
- Visited list used hash buckets 47
- Generated 202 search nodes
  Calculated heuristic for 100 nodes
  One modifications 34
  Effectless actions 68
- including 34 one modification actions
- including 0 one modification methods
- and       68 progressions of effectless actions
- Generated 100000 nodes per second
- Final fringe contains 1 nodes
- Status: Solved
- Found solution of length 101
- Total costs of actions: 35
==>
3 __method_precondition_m1_do_put_on[]
5 __method_precondition_m6_do_clear[b3]
6 nop[]
10 __method_precondition_m7_do_clear[b5,b6]
15 __method_precondition_m7_do_clear[b6,b3]
17 __method_precondition_m6_do_clear[b3]
18 nop[]
19 unstack[b3,b6]
20 put-down[b3]
21 unstack[b6,b5]
22 put-down[b6]
28 __method_precondition_m2_do_on_table[b5]
29 unstack[b5,b1]
30 put-down[b5]
32 __method_precondition_m4_do_move[b3,b5]
33 pick-up[b3]
34 stack[b3,b5]
38 __method_precondition_m1_do_put_on[]
45 __method_precondition_m6_do_clear[b6]
46 nop[]
53 __method_precondition_m6_do_clear[b3]
54 nop[]
57 __method_precondition_m6_do_clear[b3]
58 nop[]
62 __method_precondition_m4_do_move[b6,b3]
63 pick-up[b6]
64 stack[b6,b3]
68 __method_precondition_m1_do_put_on[]
79 __method_precondition_m6_do_clear[b1]
80 nop[]
93 __method_precondition_m6_do_clear[b6]
94 nop[]
103 __method_precondition_m6_do_clear[b6]
104 nop[]
109 __method_precondition_m5_do_move[b1,b6]
112 unstack[b1,b7]
113 stack[b1,b6]
116 __method_precondition_m1_do_put_on[]
129 __method_precondition_m6_do_clear[b2]
130 nop[]
133 __method_precondition_m6_do_clear[b1]
134 nop[]
138 __method_precondition_m6_do_clear[b1]
139 nop[]
143 __method_precondition_m4_do_move[b2,b1]
144 pick-up[b2]
145 stack[b2,b1]
149 __method_precondition_m1_do_put_on[]
155 __method_precondition_m3_do_on_table[b4]
156 nop[]
159 __method_precondition_m6_do_clear[b2]
160 nop[]
163 __method_precondition_m6_do_clear[b2]
164 nop[]
170 __method_precondition_m4_do_move[b4,b2]
171 pick-up[b4]
172 stack[b4,b2]
176 __method_precondition_m1_do_put_on[]
182 __method_precondition_m6_do_clear[b7]
183 nop[]
186 __method_precondition_m3_do_on_table[b4]
187 nop[]
190 __method_precondition_m3_do_on_table[b4]
191 nop[]
197 __method_precondition_m4_do_move[b7,b4]
198 pick-up[b7]
199 stack[b7,b4]
root 0
196 do_move[b7,b4] -> m4_do_move 197 198 199
189 do_on_table[b4] -> m3_do_on_table 190 191
185 do_clear[b4] -> m6_do_clear 186 187
181 do_clear[b7] -> m6_do_clear 182 183
175 do_put_on[b7,b4] -> m1_do_put_on 176 181 185 189 196
169 do_move[b4,b2] -> m4_do_move 170 171 172
162 do_on_table[b2] -> m3_do_on_table 163 164
158 do_clear[b2] -> m6_do_clear 159 160
154 do_clear[b4] -> m6_do_clear 155 156
148 do_put_on[b4,b2] -> m1_do_put_on 149 154 158 162 169
142 do_move[b2,b1] -> m4_do_move 143 144 145
137 do_on_table[b1] -> m3_do_on_table 138 139
132 do_clear[b1] -> m6_do_clear 133 134
128 do_clear[b2] -> m6_do_clear 129 130
115 do_put_on[b2,b1] -> m1_do_put_on 116 128 132 137 142
111 m5_do_move_splitted_1[b1] -> _splitting_method_m5_do_move_splitted_1 112
108 do_move[b1,b6] -> m5_do_move 109 111 113
102 do_on_table[b6] -> m3_do_on_table 103 104
92 do_clear[b6] -> m6_do_clear 93 94
78 do_clear[b1] -> m6_do_clear 79 80
67 do_put_on[b1,b6] -> m1_do_put_on 68 78 92 102 108
61 do_move[b6,b3] -> m4_do_move 62 63 64
56 do_on_table[b3] -> m3_do_on_table 57 58
52 do_clear[b3] -> m6_do_clear 53 54
44 do_clear[b6] -> m6_do_clear 45 46
37 do_put_on[b6,b3] -> m1_do_put_on 38 44 52 56 61
31 do_move[b3,b5] -> m4_do_move 32 33 34
27 do_on_table[b5] -> <m2_do_on_table;m2_do_on_table_splitted_2[b5];_splitting_method_m2_do_on_table_splitted_2;1;0,-1,2> 28 29 30
16 do_clear[b3] -> m6_do_clear 17 18
14 do_clear[b6] -> m7_do_clear 15 16 19 20
9 do_clear[b5] -> m7_do_clear 10 14 21 22
4 do_clear[b3] -> m6_do_clear 5 6
2 do_put_on[b3,b5] -> m1_do_put_on 3 4 9 27 31
0 __top[] -> __top_method 2 37 67 115 148 175
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.179688 MEMPEAK_KBS 932
