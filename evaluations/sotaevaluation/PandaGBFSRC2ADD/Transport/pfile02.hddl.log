pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/214/214.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/214/214.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.169ms
Contains 0.019ms
Restrict 0.031ms
MPrep 0.023ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [28] grounded tasks and [24] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [48] grounded tasks and [44] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 48 tasks, 44 methods.
Grounded PG:
Input was [28, 48], output was [28, 24].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 16 S 0 SC 0 SM 0 NSM 0 I 0 P 28 S 0 A 17 M 41
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/214/214.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.018 seconds
- Visited list time 0.000173 seconds
- Visited list inserts 46
- Visited list pruned 9
- Visited list contains 37
- Visited list hash collisions 9
- Visited list used hash buckets 37
- Generated 198 search nodes
  Calculated heuristic for 134 nodes
  One modifications 59
  Effectless actions 5
- including 59 one modification actions
- including 0 one modification methods
- and       5 progressions of effectless actions
- Generated 7444 nodes per second
- Final fringe contains 25 nodes
- Status: Solved
- Found solution of length 42
- Total costs of actions: 19
==>
7 drive[truck_0,city_loc_3,city_loc_1]
8 drive[truck_0,city_loc_1,city_loc_2]
15 pick_up[truck_0,city_loc_2,package_2,capacity_1,capacity_2]
34 drive[truck_0,city_loc_2,city_loc_1]
35 drive[truck_0,city_loc_1,city_loc_3]
36 drive[truck_0,city_loc_3,city_loc_0]
41 drop[truck_0,city_loc_0,package_2,capacity_1,capacity_2]
148 drive[truck_0,city_loc_0,city_loc_3]
149 drive[truck_0,city_loc_3,city_loc_1]
150 drive[truck_0,city_loc_1,city_loc_2]
157 pick_up[truck_0,city_loc_2,package_1,capacity_1,capacity_2]
168 drive[truck_0,city_loc_2,city_loc_1]
169 drive[truck_0,city_loc_1,city_loc_3]
170 drive[truck_0,city_loc_3,city_loc_0]
175 drop[truck_0,city_loc_0,package_1,capacity_1,capacity_2]
180 drive[truck_0,city_loc_0,city_loc_3]
187 pick_up[truck_0,city_loc_3,package_0,capacity_1,capacity_2]
189 drive[truck_0,city_loc_3,city_loc_1]
196 drop[truck_0,city_loc_1,package_0,capacity_1,capacity_2]
root 0
195 unload[truck_0,city_loc_1,package_0] -> m_unload_ordering_0 196
188 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 189
186 load[truck_0,city_loc_3,package_0] -> m_load_ordering_0 187
179 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 180
178 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 179 186
174 unload[truck_0,city_loc_0,package_1] -> m_unload_ordering_0 175
167 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 168
164 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 167 169
160 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 164 170
156 load[truck_0,city_loc_2,package_1] -> m_load_ordering_0 157
147 get_to[truck_0,city_loc_3] -> m_drive_to_ordering_0 148
80 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 147 149
47 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 80 150
44 m_deliver_ordering_0_splitted_1[truck_0,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 47 156
40 unload[truck_0,city_loc_0,package_2] -> m_unload_ordering_0 41
33 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 34
30 get_to[truck_0,city_loc_3] -> m_drive_to_via_ordering_0 33 35
18 get_to[truck_0,city_loc_0] -> m_drive_to_via_ordering_0 30 36
14 load[truck_0,city_loc_2,package_2] -> m_load_ordering_0 15
6 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 7
5 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 6 8
2 m_deliver_ordering_0_splitted_1[truck_0,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 5 14
0 __top[] -> <<<__top_method;deliver[package_2,city_loc_0];m_deliver_ordering_0;0;-1,-2,-3,1,2>;deliver[package_1,city_loc_0];m_deliver_ordering_0;3;0,1,2,-1,-2,-3,4>;deliver[package_0,city_loc_1];m_deliver_ordering_0;6;0,1,2,3,4,5,-1,-2,-3> 2 18 40 44 160 174 178 188 195
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.316406 MEMPEAK_KBS 932
