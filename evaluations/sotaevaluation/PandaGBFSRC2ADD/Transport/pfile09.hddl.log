pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/219/219.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/219/219.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.37ms
Contains 0.047ms
Restrict 0.071ms
MPrep 0.057ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [71] grounded tasks and [40] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [110] grounded tasks and [98] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 110 tasks, 98 methods.
Grounded PG:
Input was [71, 110], output was [71, 40].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 28 S 0 SC 0 SM 0 NSM 0 I 0 P 71 S 0 A 32 M 91
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/219/219.sas.
- State has 28 bits divided into 28 mutex groups.
- Domain contains 71 actions.
- Domain contains 103 tasks.
- Domain contains 91 methods.
- The initial state contains 9 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 101
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.01 seconds
- Visited list time 0.00136 seconds
- Visited list inserts 239
- Visited list pruned 79
- Visited list contains 160
- Visited list hash collisions 79
- Visited list used hash buckets 160
- Generated 1378 search nodes
  Calculated heuristic for 695 nodes
  One modifications 631
  Effectless actions 52
- including 631 one modification actions
- including 0 one modification methods
- and       52 progressions of effectless actions
- Generated 69500 nodes per second
- Final fringe contains 179 nodes
- Status: Solved
- Found solution of length 70
- Total costs of actions: 31
==>
6 noop[truck_0,city_loc_4]
10 pick_up[truck_0,city_loc_4,package_0,capacity_2,capacity_3]
14 drive[truck_0,city_loc_4,city_loc_1]
36 drop[truck_0,city_loc_1,package_0,capacity_2,capacity_3]
160 drive[truck_0,city_loc_1,city_loc_1]
167 pick_up[truck_0,city_loc_1,package_4,capacity_2,capacity_3]
173 drive[truck_0,city_loc_1,city_loc_4]
174 drive[truck_0,city_loc_4,city_loc_2]
193 drop[truck_0,city_loc_2,package_4,capacity_2,capacity_3]
1088 noop[truck_0,city_loc_2]
1165 pick_up[truck_0,city_loc_2,package_3,capacity_2,capacity_3]
1174 drive[truck_0,city_loc_2,city_loc_4]
1175 drive[truck_0,city_loc_4,city_loc_1]
1182 drop[truck_0,city_loc_1,package_3,capacity_2,capacity_3]
1189 noop[truck_0,city_loc_1]
1193 pick_up[truck_0,city_loc_1,package_2,capacity_2,capacity_3]
1197 drive[truck_0,city_loc_1,city_loc_4]
1205 drop[truck_0,city_loc_4,package_2,capacity_2,capacity_3]
1211 noop[truck_0,city_loc_4]
1216 pick_up[truck_0,city_loc_4,package_5,capacity_2,capacity_3]
1219 drive[truck_0,city_loc_4,city_loc_1]
1233 drop[truck_0,city_loc_1,package_5,capacity_2,capacity_3]
1245 drive[truck_0,city_loc_1,city_loc_4]
1251 pick_up[truck_0,city_loc_4,package_1,capacity_2,capacity_3]
1255 drive[truck_0,city_loc_4,city_loc_2]
1268 drop[truck_0,city_loc_2,package_1,capacity_2,capacity_3]
1358 drive[truck_0,city_loc_2,city_loc_4]
1359 drive[truck_0,city_loc_4,city_loc_1]
1365 pick_up[truck_0,city_loc_1,package_6,capacity_2,capacity_3]
1368 drive[truck_0,city_loc_1,city_loc_4]
1376 drop[truck_0,city_loc_4,package_6,capacity_2,capacity_3]
root 0
1375 unload[truck_0,city_loc_4,package_6] -> m_unload_ordering_0 1376
1367 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 1368
1364 load[truck_0,city_loc_1,package_6] -> m_load_ordering_0 1365
1357 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 1358
1289 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 1357 1359
1283 m_deliver_ordering_0_splitted_1[truck_0,package_6] -> _splitting_method_m_deliver_ordering_0_splitted_1 1289 1364
1267 unload[truck_0,city_loc_2,package_1] -> m_unload_ordering_0 1268
1254 get_to[truck_0,city_loc_2] -> m_drive_to_ordering_0 1255
1250 load[truck_0,city_loc_4,package_1] -> m_load_ordering_0 1251
1244 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 1245
1243 m_deliver_ordering_0_splitted_1[truck_0,package_1] -> _splitting_method_m_deliver_ordering_0_splitted_1 1244 1250
1232 unload[truck_0,city_loc_1,package_5] -> m_unload_ordering_0 1233
1218 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 1219
1215 load[truck_0,city_loc_4,package_5] -> m_load_ordering_0 1216
1210 get_to[truck_0,city_loc_4] -> m_i_am_there_ordering_0 1211
1207 m_deliver_ordering_0_splitted_1[truck_0,package_5] -> _splitting_method_m_deliver_ordering_0_splitted_1 1210 1215
1204 unload[truck_0,city_loc_4,package_2] -> m_unload_ordering_0 1205
1196 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 1197
1192 load[truck_0,city_loc_1,package_2] -> m_load_ordering_0 1193
1188 get_to[truck_0,city_loc_1] -> m_i_am_there_ordering_0 1189
1184 m_deliver_ordering_0_splitted_1[truck_0,package_2] -> _splitting_method_m_deliver_ordering_0_splitted_1 1188 1192
1181 unload[truck_0,city_loc_1,package_3] -> m_unload_ordering_0 1182
1173 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 1174
1171 get_to[truck_0,city_loc_1] -> m_drive_to_via_ordering_0 1173 1175
1164 load[truck_0,city_loc_2,package_3] -> m_load_ordering_0 1165
1087 get_to[truck_0,city_loc_2] -> m_i_am_there_ordering_0 1088
1084 m_deliver_ordering_0_splitted_1[truck_0,package_3] -> _splitting_method_m_deliver_ordering_0_splitted_1 1087 1164
192 unload[truck_0,city_loc_2,package_4] -> m_unload_ordering_0 193
172 get_to[truck_0,city_loc_4] -> m_drive_to_ordering_0 173
171 get_to[truck_0,city_loc_2] -> m_drive_to_via_ordering_0 172 174
166 load[truck_0,city_loc_1,package_4] -> m_load_ordering_0 167
159 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 160
156 m_deliver_ordering_0_splitted_1[truck_0,package_4] -> _splitting_method_m_deliver_ordering_0_splitted_1 159 166
35 unload[truck_0,city_loc_1,package_0] -> m_unload_ordering_0 36
13 get_to[truck_0,city_loc_1] -> m_drive_to_ordering_0 14
9 load[truck_0,city_loc_4,package_0] -> m_load_ordering_0 10
5 get_to[truck_0,city_loc_4] -> m_i_am_there_ordering_0 6
2 m_deliver_ordering_0_splitted_1[truck_0,package_0] -> _splitting_method_m_deliver_ordering_0_splitted_1 5 9
0 __top[] -> <<<<<<<__top_method;deliver[package_6,city_loc_4];m_deliver_ordering_0;6;0,1,2,3,4,5,-1,-2,-3>;deliver[package_5,city_loc_1];m_deliver_ordering_0;4;0,1,2,3,-1,-2,-3,5,6,7,8>;deliver[package_4,city_loc_2];m_deliver_ordering_0;1;0,-1,-2,-3,2,3,4,5,6,7,8,9,10>;deliver[package_3,city_loc_1];m_deliver_ordering_0;4;0,1,2,3,-1,-2,-3,5,6,7,8,9,10,11,12>;deliver[package_2,city_loc_4];m_deliver_ordering_0;7;0,1,2,3,4,5,6,-1,-2,-3,8,9,10,11,12,13,14>;deliver[package_1,city_loc_2];m_deliver_ordering_0;13;0,1,2,3,4,5,6,7,8,9,10,11,12,-1,-2,-3,14,15,16>;deliver[package_0,city_loc_1];m_deliver_ordering_0;0;-1,-2,-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18> 2 13 35 156 171 192 1084 1171 1181 1184 1196 1204 1207 1218 1232 1243 1254 1267 1283 1367 1375
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.150391 MEMPEAK_KBS 932
