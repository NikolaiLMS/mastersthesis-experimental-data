pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/13/13.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/13/13.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.1ms
Contains 0.014ms
Restrict 0.019ms
MPrep 0.016ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [22] grounded tasks and [30] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [34] grounded tasks and [30] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 34 tasks, 30 methods.
Grounded PG:
Input was [22, 34], output was [22, 30].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
0 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 15 S 0 SC 0 SM 0 NSM 0 I 0 P 16 S 5 A 10 M 28
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/13/13.sas.
- State has 15 bits divided into 15 mutex groups.
- Domain contains 21 actions.
- Domain contains 31 tasks.
- Domain contains 28 methods.
- The initial state contains 6 set bits.
- The initial task is "__top[]".
- State-based goal contains 2 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 30
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.001 seconds
- Visited list time 0.000303 seconds
- Visited list inserts 139
- Visited list pruned 24
- Visited list contains 115
- Visited list hash collisions 24
- Visited list used hash buckets 115
- Generated 526 search nodes
  Calculated heuristic for 434 nodes
  One modifications 60
  Effectless actions 32
- including 60 one modification actions
- including 0 one modification methods
- and       32 progressions of effectless actions
- Generated 434000 nodes per second
- Final fringe contains 17 nodes
- Status: Solved
- Found solution of length 44
- Total costs of actions: 11
==>
12 move[c,r3,d03]
26 open[r3,r1,d13]
36 move[r3,r1,d13]
119 __method_precondition_achieve-goals-pickup_split[r1,o1]
131 pickup[o1,r1]
171 move[r1,r3,d13]
180 __method_precondition_release-putdown_abstract_split[r3,o1]
184 putdown[o1,r3]
196 move[r3,r1,d13]
210 open[r1,r2,d12]
494 __method_precondition_achieve-goals-pickup_split[r1,o2]
497 pickup[o2,r1]
509 move[r1,r2,d12]
516 __method_precondition_release-putdown_abstract_split[r2,o2]
518 putdown[o2,r2]
521 __noop
root 0
520 achieve-goals[] -> finished 521
517 putdown_abstract[] -> newMethod23 518
515 release-putdown_abstract_splitted_2[] -> _splitting_method_release-putdown_abstract_splitted_2 516
511 release[] -> release-putdown_abstract 515 517 520
508 move_abstract[] -> newMethod24 509
499 release[] -> release-move 508 511
496 pickup_abstract[o2] -> newMethod22 497
493 achieve-goals-pickup_splitted_3[] -> <_splitting_method_achieve-goals-pickup_splitted_3;achieve-goals-pickup_splitted_1[o2];_splitting_method_achieve-goals-pickup_splitted_1;0;-1,1> 494 496
217 achieve-goals[] -> achieve-goals-pickup 493 499
209 open_abstract[] -> newMethod25 210
206 achieve-goals[] -> achieve-goals-open 209 217
195 move_abstract[] -> newMethod24 196
187 achieve-goals[] -> achieve-goals-move 195 206
183 putdown_abstract[] -> newMethod23 184
179 release-putdown_abstract_splitted_2[] -> _splitting_method_release-putdown_abstract_splitted_2 180
176 release[] -> release-putdown_abstract 179 183 187
170 move_abstract[] -> newMethod24 171
133 release[] -> release-move 170 176
130 pickup_abstract[o1] -> newMethod22 131
118 achieve-goals-pickup_splitted_3[] -> <_splitting_method_achieve-goals-pickup_splitted_3;achieve-goals-pickup_splitted_1[o1];_splitting_method_achieve-goals-pickup_splitted_1;0;-1,1> 119 130
47 achieve-goals[] -> achieve-goals-pickup 118 133
35 move_abstract[] -> newMethod24 36
32 achieve-goals[] -> achieve-goals-move 35 47
25 open_abstract[] -> newMethod25 26
16 achieve-goals[] -> achieve-goals-open 25 32
11 move_abstract[] -> newMethod24 12
3 achieve-goals[] -> achieve-goals-move 11 16
0 __top[] -> __top_method 3
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.150391 MEMPEAK_KBS 932
