pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/177/177.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/177/177.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.274ms
Contains 0.035ms
Restrict 0.048ms
MPrep 0.03ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [47] grounded tasks and [33] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [68] grounded tasks and [40] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 68 tasks, 40 methods.
Grounded PG:
Input was [47, 68], output was [47, 33].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
3 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 30 S 0 SC 0 SM 0 NSM 0 I 0 P 19 S 25 A 18 M 37
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/177/177.sas.
- State has 30 bits divided into 30 mutex groups.
- Domain contains 44 actions.
- Domain contains 62 tasks.
- Domain contains 37 methods.
- The initial state contains 14 set bits.
- The initial task is "__top[]".
- State-based goal contains 2 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 58
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.001 seconds
- Visited list time 8.3e-05 seconds
- Visited list inserts 25
- Visited list pruned 0
- Visited list contains 25
- Visited list hash collisions 0
- Visited list used hash buckets 25
- Generated 103 search nodes
  Calculated heuristic for 52 nodes
  One modifications 18
  Effectless actions 33
- including 18 one modification actions
- including 0 one modification methods
- and       33 progressions of effectless actions
- Generated 52000 nodes per second
- Final fringe contains 1 nodes
- Status: Solved
- Found solution of length 59
- Total costs of actions: 21
==>
3 __method_precondition_m1_do_put_on[]
7 __method_precondition_m7_do_clear[b4,b5]
10 __method_precondition_m7_do_clear[b5,b3]
13 __method_precondition_m7_do_clear[b3,b2]
15 __method_precondition_m6_do_clear[b2]
16 nop[]
17 unstack[b2,b3]
18 put-down[b2]
19 unstack[b3,b5]
20 put-down[b3]
21 unstack[b5,b4]
22 put-down[b5]
25 __method_precondition_m6_do_clear[b2]
26 nop[]
29 __method_precondition_m6_do_clear[b2]
30 nop[]
34 __method_precondition_m5_do_move[b4,b2]
36 unstack[b4,b1]
37 stack[b4,b2]
41 __method_precondition_m1_do_put_on[]
43 __method_precondition_m3_do_on_table[b1]
44 nop[]
48 __method_precondition_m6_do_clear[b4]
49 nop[]
53 __method_precondition_m6_do_clear[b4]
54 nop[]
58 __method_precondition_m4_do_move[b1,b4]
59 pick-up[b1]
60 stack[b1,b4]
64 __method_precondition_m1_do_put_on[]
78 __method_precondition_m6_do_clear[b3]
79 nop[]
82 __method_precondition_m3_do_on_table[b1]
83 nop[]
87 __method_precondition_m3_do_on_table[b1]
88 nop[]
98 __method_precondition_m4_do_move[b3,b1]
99 pick-up[b3]
100 stack[b3,b1]
root 0
97 do_move[b3,b1] -> m4_do_move 98 99 100
86 do_on_table[b1] -> m3_do_on_table 87 88
81 do_clear[b1] -> m6_do_clear 82 83
77 do_clear[b3] -> m6_do_clear 78 79
63 do_put_on[b3,b1] -> m1_do_put_on 64 77 81 86 97
57 do_move[b1,b4] -> m4_do_move 58 59 60
52 do_on_table[b4] -> m3_do_on_table 53 54
47 do_clear[b4] -> m6_do_clear 48 49
42 do_clear[b1] -> m6_do_clear 43 44
40 do_put_on[b1,b4] -> m1_do_put_on 41 42 47 52 57
35 m5_do_move_splitted_1[b4] -> _splitting_method_m5_do_move_splitted_1 36
33 do_move[b4,b2] -> m5_do_move 34 35 37
28 do_on_table[b2] -> m3_do_on_table 29 30
24 do_clear[b2] -> m6_do_clear 25 26
14 do_clear[b2] -> m6_do_clear 15 16
12 do_clear[b3] -> m7_do_clear 13 14 17 18
9 do_clear[b5] -> m7_do_clear 10 12 19 20
6 do_clear[b4] -> m7_do_clear 7 9 21 22
2 do_put_on[b4,b2] -> m1_do_put_on 3 6 24 28 33
0 __top[] -> __top_method 2 40 63
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.121094 MEMPEAK_KBS 932
