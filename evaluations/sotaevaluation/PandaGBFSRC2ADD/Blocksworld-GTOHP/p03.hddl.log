pandaPIparser is configured as follows
  Colors in output: true
  Mode: parsing mode
  Parameter splitting: true
  Conditional effects: exponential encoding
  Disjunctive preconditions as HTN: false
  Replace goal with action: false
  Output: pandaPI format
General Options
  Print timings: false
  Quiet mode: false
Inference Options
  H2 mutexes: false
  FAM groups: false
Transformation Options
  Add zero-cost no-op to empty methods: true
  Remove duplicate actions: true
  Remove useless literals: true
  Expand abstract tasks with one method: true
  Remove empty method preconditions: true
  Two regularisation: false
  Compile negative SAS variables: false
Runtime Optimisations
  Hierarchy Typing: true
  Future Caching: false
  Static Precondition Checking: false
Output Options
  Panda planner format: true
  HDDL: false
  SAS for Fast Downward (without hierarchy): false
Output Formatting Options
  Output only SAS+ variables: false
  SAS+ delete mode: as input
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/181/181.parsed.
Writing output to /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/181/181.sas.
Writing output to standard output.
Parsing done.
Conditional Effects expanded
done.
Starting Hierarchy Typing
Total 0.38ms
Contains 0.063ms
Restrict 0.056ms
MPrep 0.046ms
Finished Hierarchy Typing
Running PG.
Process actions without preconditions
Done.
Returning from runGpg().
PG done. Postprocessing
PG postprocessing done.
Calculated [77] grounded tasks and [56] reachable facts.
Running TDG.
Process actions without preconditions
Done.
Returning from runGpg().
TDG done.
Calculated [111] grounded tasks and [67] grounded decomposition methods.
Performing DFS.
DFS done.
After DFS: 111 tasks, 67 methods.
Grounded PG:
Input was [77, 111], output was [77, 56].
Simplifying instance.
Removing useless facts/literals
Removing method precondition actions whose precondition is empty
Expanding abstract tasks with only one method
Starting duplicate elimination.
Data structure build.
5 duplicates found.
Duplicates replaced in methods.
Further Mutex Groups: 0 strict 0 non strict
Writing instance to output.
Final Statistics: F 48 S 0 SC 0 SM 0 NSM 0 I 0 P 31 S 41 A 30 M 63
Exiting.
Random seed: 42
Time limit: 1800 seconds
Reading input from /home/schnell/lilotane/sotaevaluation//PandaGBFS_runwatchtime_timeout1800_2021-11-16_21:14:14/runwatch_log/181/181.sas.
- State has 48 bits divided into 48 mutex groups.
- Domain contains 72 actions.
- Domain contains 102 tasks.
- Domain contains 63 methods.
- The initial state contains 22 set bits.
- The initial task is "__top[]".
- State-based goal contains 4 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 98
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.001 seconds
- Visited list time 0.000177 seconds
- Visited list inserts 44
- Visited list pruned 0
- Visited list contains 44
- Visited list hash collisions 0
- Visited list used hash buckets 44
- Generated 200 search nodes
  Calculated heuristic for 98 nodes
  One modifications 36
  Effectless actions 66
- including 36 one modification actions
- including 0 one modification methods
- and       66 progressions of effectless actions
- Generated 98000 nodes per second
- Final fringe contains 2 nodes
- Status: Solved
- Found solution of length 102
- Total costs of actions: 39
==>
3 __method_precondition_m1_do_put_on[]
6 __method_precondition_m7_do_clear[b3,b1]
10 __method_precondition_m7_do_clear[b1,b8]
14 __method_precondition_m7_do_clear[b8,b9]
17 __method_precondition_m7_do_clear[b9,b5]
20 __method_precondition_m7_do_clear[b5,b2]
24 __method_precondition_m7_do_clear[b2,b7]
25 __method_precondition_m6_do_clear[b7]
26 nop[]
27 unstack[b7,b2]
28 put-down[b7]
29 unstack[b2,b5]
30 put-down[b2]
31 unstack[b5,b9]
32 put-down[b5]
33 unstack[b9,b8]
34 put-down[b9]
35 unstack[b8,b1]
36 put-down[b8]
37 unstack[b1,b3]
38 put-down[b1]
42 __method_precondition_m7_do_clear[b4,b6]
44 __method_precondition_m3_do_on_table[b6]
45 nop[]
46 unstack[b6,b4]
47 put-down[b6]
48 __method_precondition_m3_do_on_table[b4]
49 nop[]
52 __method_precondition_m4_do_move[b3,b4]
53 pick-up[b3]
54 stack[b3,b4]
58 __method_precondition_m1_do_put_on[]
60 __method_precondition_m3_do_on_table[b6]
61 nop[]
64 __method_precondition_m3_do_on_table[b3]
65 nop[]
69 __method_precondition_m3_do_on_table[b3]
70 nop[]
76 __method_precondition_m4_do_move[b6,b3]
77 pick-up[b6]
78 stack[b6,b3]
82 __method_precondition_m1_do_put_on[]
84 __method_precondition_m6_do_clear[b2]
85 nop[]
89 __method_precondition_m3_do_on_table[b6]
90 nop[]
93 __method_precondition_m3_do_on_table[b6]
94 nop[]
98 __method_precondition_m4_do_move[b2,b6]
99 pick-up[b2]
100 stack[b2,b6]
104 __method_precondition_m1_do_put_on[]
118 __method_precondition_m3_do_on_table[b1]
119 nop[]
123 __method_precondition_m6_do_clear[b2]
124 nop[]
128 __method_precondition_m6_do_clear[b2]
129 nop[]
138 __method_precondition_m4_do_move[b1,b2]
139 pick-up[b1]
140 stack[b1,b2]
144 __method_precondition_m1_do_put_on[]
172 __method_precondition_m6_do_clear[b5]
173 nop[]
176 __method_precondition_m3_do_on_table[b1]
177 nop[]
185 __method_precondition_m3_do_on_table[b1]
186 nop[]
195 __method_precondition_m4_do_move[b5,b1]
196 pick-up[b5]
197 stack[b5,b1]
root 0
194 do_move[b5,b1] -> m4_do_move 195 196 197
184 do_on_table[b1] -> m3_do_on_table 185 186
175 do_clear[b1] -> m6_do_clear 176 177
171 do_clear[b5] -> m6_do_clear 172 173
143 do_put_on[b5,b1] -> m1_do_put_on 144 171 175 184 194
137 do_move[b1,b2] -> m4_do_move 138 139 140
127 do_on_table[b2] -> m3_do_on_table 128 129
122 do_clear[b2] -> m6_do_clear 123 124
117 do_clear[b1] -> m6_do_clear 118 119
103 do_put_on[b1,b2] -> m1_do_put_on 104 117 122 127 137
97 do_move[b2,b6] -> m4_do_move 98 99 100
92 do_on_table[b6] -> m3_do_on_table 93 94
88 do_clear[b6] -> m6_do_clear 89 90
83 do_clear[b2] -> m6_do_clear 84 85
81 do_put_on[b2,b6] -> m1_do_put_on 82 83 88 92 97
75 do_move[b6,b3] -> m4_do_move 76 77 78
68 do_on_table[b3] -> m3_do_on_table 69 70
63 do_clear[b3] -> m6_do_clear 64 65
59 do_clear[b6] -> m6_do_clear 60 61
57 do_put_on[b6,b3] -> m1_do_put_on 58 59 63 68 75
51 do_move[b3,b4] -> m4_do_move 52 53 54
43 do_clear[b6] -> m6_do_clear 44 45
41 do_clear[b4] -> m7_do_clear 42 43 46 47
23 do_clear[b2] -> <m7_do_clear;do_clear[b7];m6_do_clear;1;0,-1,-2,2,3> 24 25 26 27 28
19 do_clear[b5] -> m7_do_clear 20 23 29 30
16 do_clear[b9] -> m7_do_clear 17 19 31 32
13 do_clear[b8] -> m7_do_clear 14 16 33 34
9 do_clear[b1] -> m7_do_clear 10 13 35 36
5 do_clear[b3] -> m7_do_clear 6 9 37 38
2 do_put_on[b3,b4] -> <m1_do_put_on;do_on_table[b4];m3_do_on_table;3;0,1,2,-1,-2,4> 3 5 41 48 49 51
0 __top[] -> __top_method 2 57 81 103 143
<==

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 0.143555 MEMPEAK_KBS 932
